generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model blog {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar(255)
  css_design      String?       @db.VarChar(255)
  user_id         String?       @db.Uuid
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post            post[]
}

model follow {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                   String?  @db.Uuid
  followee_id                   String?  @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_follow_followee_idTouser user?    @relation("follow_followee_idTouser", fields: [followee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_follower_idTouser user?    @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  blog        blog[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text_content String
  image        String?  @db.VarChar(255)
  video        String?  @db.VarChar(255)
  audio        String?  @db.VarChar(255)
  user_id      String?  @db.Uuid
  blog_id      String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  blog         blog?    @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String         @unique @db.VarChar(255)
  firstName                       String?        @db.VarChar(255)
  lastName                        String?        @db.VarChar(255)
  roq_user_id                     String         @db.VarChar(255)
  tenant_id                       String         @db.VarChar(255)
  created_at                      DateTime       @default(now()) @db.Timestamp(6)
  updated_at                      DateTime       @default(now()) @db.Timestamp(6)
  blog                            blog[]
  follow_follow_followee_idTouser follow[]       @relation("follow_followee_idTouser")
  follow_follow_follower_idTouser follow[]       @relation("follow_follower_idTouser")
  organization                    organization[]
  post                            post[]
}
